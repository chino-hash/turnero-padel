#!/bin/sh
#
# Git Hook Pre-commit para protecci√≥n de archivos cr√≠ticos
# Este script valida que no se modifiquen archivos protegidos sin autorizaci√≥n
#

# Colores para output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# Lista de archivos protegidos
PROTECTED_FILES=(
    "components/TurneroApp.tsx"
    "components/MisTurnos.tsx"
    "app/(protected)/dashboard/page.tsx"
    "app/(protected)/layout.tsx"
    "components/ui/button.tsx"
    "components/ui/card.tsx"
    "components/ui/input.tsx"
    "hooks/useAuth.ts"
    "lib/auth.ts"
    "middleware.ts"
)

# Funci√≥n para verificar si un archivo est√° protegido
is_protected_file() {
    local file="$1"
    for protected in "${PROTECTED_FILES[@]}"; do
        if [[ "$file" == *"$protected"* ]]; then
            return 0
        fi
    done
    return 1
}

# Funci√≥n para verificar comentario de protecci√≥n
has_protection_header() {
    local file="$1"
    if head -15 "$file" | grep -q "‚ö†Ô∏è ARCHIVO PROTEGIDO - NO MODIFICAR SIN AUTORIZACI√ìN"; then
        return 0
    fi
    return 1
}

# Obtener archivos modificados
modified_files=$(git diff --cached --name-only)

# Variables de control
has_protected_changes=false
missing_headers=()

echo "${YELLOW}üîç Verificando archivos protegidos...${NC}"

# Verificar cada archivo modificado
for file in $modified_files; do
    if is_protected_file "$file"; then
        echo "${YELLOW}‚ö†Ô∏è  Archivo protegido detectado: $file${NC}"
        has_protected_changes=true
        
        # Verificar si tiene el header de protecci√≥n
        if [ -f "$file" ] && ! has_protection_header "$file"; then
            missing_headers+=("$file")
        fi
    fi
done

# Si hay archivos protegidos sin headers
if [ ${#missing_headers[@]} -gt 0 ]; then
    echo "${RED}‚ùå ERROR: Los siguientes archivos protegidos no tienen el header requerido:${NC}"
    for file in "${missing_headers[@]}"; do
        echo "${RED}   - $file${NC}"
    done
    echo "${YELLOW}üí° Agregue el comentario de protecci√≥n al inicio del archivo.${NC}"
    exit 1
fi

# Si hay cambios en archivos protegidos, solicitar confirmaci√≥n
if [ "$has_protected_changes" = true ]; then
    echo "${YELLOW}‚ö†Ô∏è  ADVERTENCIA: Est√° modificando archivos protegidos del frontend p√∫blico.${NC}"
    echo "${YELLOW}   Estos cambios afectan directamente a los usuarios finales.${NC}"
    echo ""
    echo "${YELLOW}   ¬øEst√° seguro de que desea continuar? (y/N)${NC}"
    
    # En entornos automatizados, verificar variable de entorno
    if [ "$FRONTEND_PROTECTION_OVERRIDE" = "true" ]; then
        echo "${GREEN}‚úÖ Override autorizado por variable de entorno.${NC}"
    else
        # En desarrollo interactivo, solicitar confirmaci√≥n
        read -r response
        case "$response" in
            [yY][eE][sS]|[yY])
                echo "${GREEN}‚úÖ Continuando con el commit...${NC}"
                ;;
            *)
                echo "${RED}‚ùå Commit cancelado por el usuario.${NC}"
                echo "${YELLOW}üí° Para modificar archivos protegidos:${NC}"
                echo "${YELLOW}   1. Solicite autorizaci√≥n formal${NC}"
                echo "${YELLOW}   2. Documente los cambios${NC}"
                echo "${YELLOW}   3. Use: FRONTEND_PROTECTION_OVERRIDE=true git commit${NC}"
                exit 1
                ;;
        esac
    fi
fi

echo "${GREEN}‚úÖ Verificaci√≥n de protecci√≥n completada.${NC}"
exit 0