/**
 * Script para inicializar administradores en la base de datos
 * 
 * Este script:
 * 1. Crea la base de datos si no existe
 * 2. Ejecuta las migraciones de Prisma
 * 3. Inicializa administradores desde variables de entorno
 * 4. Crea datos de ejemplo para desarrollo
 */

const { PrismaClient } = require('@prisma/client')
require('dotenv').config()

const prisma = new PrismaClient()

async function initializeAdmins() {
  try {
    console.log('üöÄ Inicializando sistema de administradores...')

    // 1. Obtener administradores desde variable de entorno
    const envAdmins = process.env.ADMIN_EMAILS?.split(',').map(email => email.trim()) || []
    
    if (envAdmins.length === 0) {
      console.log('‚ö†Ô∏è  No se encontraron administradores en ADMIN_EMAILS')
      console.log('   Agregando administrador por defecto: admin@turnero.com')
      envAdmins.push('admin@turnero.com')
    }

    // 2. Agregar administradores a la base de datos (como respaldo)
    for (const email of envAdmins) {
      if (!email || email.length === 0) continue

      try {
        await prisma.adminWhitelist.upsert({
          where: { email: email.toLowerCase() },
          update: { 
            isActive: true,
            notes: 'Administrador principal (desde env)',
            updatedAt: new Date()
          },
          create: {
            email: email.toLowerCase(),
            isActive: true,
            addedBy: 'system',
            notes: 'Administrador principal (desde env)'
          }
        })
        
        console.log(`‚úÖ Administrador configurado: ${email}`)
      } catch (error) {
        console.error(`‚ùå Error configurando ${email}:`, error.message)
      }
    }

    // 3. Crear canchas de ejemplo si no existen
    const courtCount = await prisma.court.count()
    if (courtCount === 0) {
      console.log('üèüÔ∏è Creando canchas de ejemplo...')
      
      await prisma.court.createMany({
        data: [
          {
            name: 'Cancha 1',
            description: 'Cancha principal con iluminaci√≥n LED',
            basePrice: 600000, // $6000 en centavos
            features: ['Iluminaci√≥n LED', 'C√©sped sint√©tico', 'Vestuarios'],
            isActive: true
          },
          {
            name: 'Cancha 2', 
            description: 'Cancha secundaria',
            basePrice: 500000, // $5000 en centavos
            features: ['C√©sped sint√©tico', 'Vestuarios'],
            isActive: true
          }
        ]
      })
      
      console.log('‚úÖ Canchas de ejemplo creadas')
    }

    // 4. Crear configuraciones del sistema
    const settingsCount = await prisma.systemSetting.count()
    if (settingsCount === 0) {
      console.log('‚öôÔ∏è Creando configuraciones del sistema...')
      
      await prisma.systemSetting.createMany({
        data: [
          {
            key: 'booking_advance_days',
            value: '30',
            description: 'D√≠as de anticipaci√≥n m√°xima para reservas',
            category: 'booking',
            isPublic: true
          },
          {
            key: 'default_slot_duration',
            value: '90',
            description: 'Duraci√≥n por defecto de slots en minutos',
            category: 'booking',
            isPublic: true
          },
          {
            key: 'deposit_percentage',
            value: '50',
            description: 'Porcentaje de dep√≥sito requerido',
            category: 'payment',
            isPublic: true
          },
          {
            key: 'app_name',
            value: 'Turnero de Padel',
            description: 'Nombre de la aplicaci√≥n',
            category: 'general',
            isPublic: true
          }
        ]
      })
      
      console.log('‚úÖ Configuraciones del sistema creadas')
    }

    console.log('üéâ Inicializaci√≥n completada exitosamente!')
    console.log('')
    console.log('üìã Resumen:')
    console.log(`   üëë Administradores: ${envAdmins.join(', ')}`)
    console.log(`   üèüÔ∏è Canchas: ${await prisma.court.count()}`)
    console.log(`   ‚öôÔ∏è Configuraciones: ${await prisma.systemSetting.count()}`)
    console.log('')
    console.log('üîê Los administradores pueden:')
    console.log('   - Acceder al panel de administraci√≥n')
    console.log('   - Gestionar reservas y pagos')
    console.log('   - Agregar/remover otros administradores')
    console.log('   - Configurar el sistema')

  } catch (error) {
    console.error('‚ùå Error durante la inicializaci√≥n:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

// Ejecutar solo si se llama directamente
if (require.main === module) {
  initializeAdmins()
}

module.exports = { initializeAdmins }
